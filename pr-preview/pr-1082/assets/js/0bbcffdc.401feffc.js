"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[6839],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var i=s(296540);const t={},o=i.createContext(t);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},134211:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/cover-image-8fef209b02018162b80d8fdc5ee94416.webp"},149540:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/cover-image-8fef209b02018162b80d8fdc5ee94416.webp"},245890:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var i=s(474848),t=s(28453);const o={slug:"getting-started-with-push-sdk-rest-api",title:"Getting Started With Push SDK REST API\u2699\ufe0f",authors:["push"],image:"./cover-image.webp",text:"The PUSH-SDK, is a growing JavaScript-based SDK that allows developers to add push notification functionality to their dapps.",tags:["Web3","Blockchain","SDK","Push Notification Service","Developer"]},a=void 0,r={permalink:"/push-website/pr-preview/pr-1082/blog/getting-started-with-push-sdk-rest-api",source:"@site/blog/2023-02-01-getting-started-with-push/index.md",title:"Getting Started With Push SDK REST API\u2699\ufe0f",description:"Cover image of Getting Started With Push SDK REST API\u2699\ufe0f",date:"2023-02-01T00:00:00.000Z",formattedDate:"February 1, 2023",tags:[{label:"Web3",permalink:"/push-website/pr-preview/pr-1082/blog/tags/web-3"},{label:"Blockchain",permalink:"/push-website/pr-preview/pr-1082/blog/tags/blockchain"},{label:"SDK",permalink:"/push-website/pr-preview/pr-1082/blog/tags/sdk"},{label:"Push Notification Service",permalink:"/push-website/pr-preview/pr-1082/blog/tags/push-notification-service"},{label:"Developer",permalink:"/push-website/pr-preview/pr-1082/blog/tags/developer"}],readingTime:5.07,hasTruncateMarker:!0,authors:[{name:"Push Chain",url:"https://x.com/PushChain",page:!0,imageURL:"/assets/blog/authors/authorpush.png",key:"push"}],frontMatter:{slug:"getting-started-with-push-sdk-rest-api",title:"Getting Started With Push SDK REST API\u2699\ufe0f",authors:["push"],image:"./cover-image.webp",text:"The PUSH-SDK, is a growing JavaScript-based SDK that allows developers to add push notification functionality to their dapps.",tags:["Web3","Blockchain","SDK","Push Notification Service","Developer"]},unlisted:!1,prevItem:{title:"Push and Wherever Team Up to Bring Web3 Communication Tools to Dapps\ud83d\udee0\ufe0f",permalink:"/push-website/pr-preview/pr-1082/blog/push-and-wherever-team-up-to-bring-web3-communication-tools-to-dapps"},nextItem:{title:"QiDAO Taps Push to Update Users on their Debt Positions\ud83e\ude99",permalink:"/push-website/pr-preview/pr-1082/blog/qi-dao-taps-push-to-update-users-on-their-debt-positions"}},d={image:s(149540).A,authorsImageUrls:[void 0]},h=[{value:"Fetching user notifications",id:"fetching-user-notifications",level:2},{value:"Fetching user subscriptions",id:"fetching-user-subscriptions",level:2},{value:"Fetching channel details",id:"fetching-channel-details",level:2},{value:"Searching for channels",id:"searching-for-channels",level:2},{value:"Opting out of a channel",id:"opting-out-of-a-channel",level:2},{value:"Sending a notification",id:"sending-a-notification",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Cover image of Getting Started With Push SDK REST API\u2699\ufe0f",src:s(134211).A+"",width:"1400",height:"735"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/push-protocol/push-sdk",children:"PUSH-SDK"}),", is a growing JavaScript-based SDK that allows developers to add push notification functionality to their dapps. Using the SDK, developers can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Build PUSH features into their dapps"}),"\n",(0,i.jsx)(n.li,{children:"Get access to Push Nodes APIs"}),"\n",(0,i.jsx)(n.li,{children:"Render Push Notifications UI"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It is written in Typescript and supports React, React Native, Plain JS, and Node JS-based platforms. (We are adding support for more!) It is also built on top of standard Web3 packages like ",(0,i.jsx)("b",{children:"ethers, @web3-react"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you\u2019re looking for our full documentation on ",(0,i.jsx)(n.a,{href:"https://comms.push.org/docs",children:"Push-SDK REST API, you can find that here"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"But for now, let\u2019s walk you through the main features of the Push-SDK REST API and how to use them in your code."}),"\n",(0,i.jsx)(n.h2,{id:"fetching-user-notifications",children:"Fetching user notifications"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)("b",{children:"getFeeds"})," method to fetch a user's notifications. This method takes an options object as an argument, which allows you to specify the following parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"user"})," (mandatory, string): The user\u2019s address in CAIP format."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"page"})," (optional, number): The page index of the results. Default is 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"limit"})," (optional, number): The number of items per page. Default is 10."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"spam"})," (optional, boolean): Whether to fetch spam notifications. Default is false."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"env"})," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"raw"})," (optional, boolean): Whether to return the raw, unformatted API response. Default is ",(0,i.jsx)("b",{children:"false"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Here\u2019s an example of how you might use the ",(0,i.jsx)("b",{children:"getFeeds"})," method in your code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const notifications = await PushAPI.user.getFeeds({\n  user: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"In this example, we define a user address using the CAIP format. CAIP, or Chain Agnostic Improvement Proposal, is a way to describe standards for blockchain projects that are not specific to a single chain. It was developed by the Ethereum Improvement Proposal (EIP) process and is used to identify and encode information about Ethereum addresses, contract addresses, and other crypto-assets."}),"\n",(0,i.jsx)(n.p,{children:"It is important to note that CAIP is not a standardized way of identifying and encoding information about crypto-assets; it is under development by the Ethereum community and is not yet widely adopted in the ecosystem."}),"\n",(0,i.jsx)(n.p,{children:"CAIP addresses are composed of three parts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"The namespace:"})," This is a string designed to uniquely identify a blockchain ecosystem or set of ecosystems as a namespace."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"The network ID:"})," This is an integer that identifies the Ethereum network the asset belongs to. For example, 1 is the main network, 3 is the Ropsten test network, 5 is the Goerli test network, and 11155111 is Sepolia test network."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"The address:"})," This is the actual address of the asset, encoded as a hexadecimal string."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the namespace is eip155 which identifies EVM chains, the network ID is 5 (Goerli test network) and the address is ",(0,i.jsx)("b",{children:"0xD8634C39BBFd4033c0d3289C4515275102423681"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"CAIP is designed to be flexible and extensible, allowing for the inclusion of additional information as needed. It is used by the Push Protocol and other Ethereum-based projects as a standardized way of identifying and encoding information about crypto-assets, and distinguishing information from different chains."}),"\n",(0,i.jsxs)(n.p,{children:["Continuing with ",(0,i.jsx)("b",{children:"getFeeds"}),", to fetch spam notifications, set the ",(0,i.jsx)("b",{children:"spam"})," parameter to ",(0,i.jsx)("b",{children:"true"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const spams = await PushAPI.user.getFeeds({\n  user: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  spam: true,\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("b",{children:"getFeeds"})," method returns a list of notifications for the specified user."]}),"\n",(0,i.jsx)(n.h2,{id:"fetching-user-subscriptions",children:"Fetching user subscriptions"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)("b",{children:"getSubscriptions"})," method to fetch a user's subscriptions. This method takes an options object as an argument, which allows you to specify the following parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"user"})," (mandatory, string): The user\u2019s address in CAIP format."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"env"})," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019.\nHere\u2019s an example of how you might use the ",(0,i.jsx)("b",{children:"getSubscriptions"})," method in your code:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const subscriptions = await PushAPI.user.getSubscriptions({\n  user: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("b",{children:"getSubscriptions"})," method returns a list of channels ",(0,i.jsx)("b",{children:(0,i.jsx)(n.code,{children:"[{ channel: '0xaddress', ... }]"})})," subscribed by the user."]}),"\n",(0,i.jsx)(n.h2,{id:"fetching-channel-details",children:"Fetching channel details"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)("b",{children:"getChannel"})," method to fetch information about a specific channel. This method takes an options object as an argument, which allows you to specify the following parameters:"]}),"\n",(0,i.jsx)(n.p,{children:"channel (mandatory, string): The channel\u2019s address in CAIP format.\nenv (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019.\nHere\u2019s an example of how you might use the getChannel method in your code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const channelData = await PushAPI.channels.getChannel({\n  channel: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("b",{children:"getChannel"})," method returns an object with information about the channel."]}),"\n",(0,i.jsx)(n.h2,{id:"searching-for-channels",children:"Searching for channels"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)("b",{children:"search"})," method to search for channels based on a specified query. It takes an options object as an argument, which allows you to specify the following parameters:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"query"})," (mandatory, string): The search query."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"page"})," (optional, number): The page index of the results. Default is 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"limi"}),"t (optional, number): The number of items per page. Default is 10."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"env"})," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Here\u2019s an example of how you might use the ",(0,i.jsx)("b",{children:"search"})," method in your code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"await PushAPI.channels.subscribe({\n  signer: _signer,\n  user: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  channel: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("b",{children:"subscribe"})," method returns a confirmation of the subscription."]}),"\n",(0,i.jsx)(n.h2,{id:"opting-out-of-a-channel",children:"Opting out of a channel"}),"\n",(0,i.jsx)(n.p,{children:"You can use the unsubscribe method to allow a user to opt out of a specific channel. This method takes an options object as an argument, which allows you to specify the following parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"signer"})," (mandatory, object): The object that signs the unsubscription transaction."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"user"})," (mandatory, string): The user\u2019s address in CAIP format."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"channel"})," (mandatory, string): The channel\u2019s address in CAIP format."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("b",{children:"env"})," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019.\nHere\u2019s an example of how you might use the ",(0,i.jsx)("b",{children:"unsubscribe"})," method in your code:"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sending-a-notification",children:"Sending a notification"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)("b",{children:"sendNotification"})," method from the payloads object to send a direct payload notification to a specific recipient, group of recipients, or all recipients. This method takes an options object as an argument, which allows you to specify the following parameters:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"signer"})," (mandatory, object): The object representing the signer for the transaction. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"type"})," (mandatory, number): The type of recipient. Possible values are 1 (broadcast), 3 (single recipient), and 4 (group of recipients). ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"identityType"})," (mandatory, number): The identity type of the recipient. Possible values are 2 (direct payload). ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"notification"})," (mandatory, object): An object representing the notification. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"title"})," (mandatory, string): The title of the notification."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"body"})," (mandatory, string): The body of the notification.\n",(0,i.jsx)("b",{children:"payload"})," (mandatory, object): An object representing the payload."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"title"})," (mandatory, string): The title of the payload."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"body"})," (mandatory, string): The body of the payload."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"cta"})," (optional, string): The call-to-action of the payload."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"img"})," (optional, string): The image of the payload. ",(0,i.jsx)("br",{})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"recipients"})," (optional, string or array of strings): The recipient address(es) in CAIP format. Only required for type 3 (single recipient) or type 4 (group of recipients). ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"channel"})," (mandatory, string): The channel\u2019s address in CAIP format. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)("b",{children:"env"})," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(n.p,{children:["Here are examples of how you might use the ",(0,i.jsx)("b",{children:"sendNotification"})," method in your code:"]}),"\n",(0,i.jsx)("b",{children:"Single recipient (target):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const apiResponse = await PushAPI.payloads.sendNotification({\n  signer,\n  type: 3, // target\n  identityType: 2, // direct payload\n  notification: {\n    title: `[SDK-TEST] notification TITLE:`,\n    body: `[sdk-test] notification BODY`,\n  },\n  payload: {\n    title: `[sdk-test] payload title`,\n    body: `sample msg body`,\n    cta: '',\n    img: '',\n  },\n  recipients: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681', // recipient address\n  channel: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681', // your channel address\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsx)("b",{children:"Group of recipients (subset):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const apiResponse = await PushAPI.payloads.sendNotification({\n  signer,\n  type: 4, // subset\n  identityType: 2, // direct payload\n  notification: {\n    title: `[SDK-TEST] notification TITLE:`,\n    body: `[sdk-test] notification BODY`,\n  },\n  payload: {\n    title: `[sdk-test] payload title`,\n    body: `sample msg body`,\n    cta: '',\n    img: '',\n  },\n  recipients: [\n    'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681',\n    'eip155:11155111:0xCdBE6D076e05c5875D90fa35cc85694E1EAFBBd1',\n  ], // recipients addresses\n  channel: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681', // your channel address\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsx)("b",{children:"All recipients (broadcast):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const apiResponse = await PushAPI.payloads.sendNotification({\n  signer,\n  type: 1, // broadcast\n  identityType: 2, // direct payload\n  notification: {\n    title: `[SDK-TEST] notification TITLE:`,\n    body: `[sdk-test] notification BODY`,\n  },\n  payload: {\n    title: `[sdk-test] payload title`,\n    body: `sample msg body`,\n    cta: '',\n    img: '',\n  },\n  channel: 'eip155:11155111:0xD8634C39BBFd4033c0d3289C4515275102423681', // your channel address\n  env: 'staging',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("b",{children:"sendNotification"})," method returns a confirmation (apiResponse) of the notification being sent, with a status code of 204 indicating success."]}),"\n",(0,i.jsx)(n.p,{children:"That\u2019s it! You now know how to use the main features of the Push Protocol REST API to add push notification functionality to your application\ud83c\udf89"}),"\n",(0,i.jsx)(n.p,{children:"We\u2019ll cover other parts of the Push SDK in coming posts so stay tuned!"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@pushprotocol/restapi",children:"Push Protocol SDK documentation here"})," \u2014 if you\u2019d like more reference material to chew on."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/push-protocol/push-sdk",children:"Push SDK on GitHub"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://discord.gg/pushprotocol",children:"Our Discord"})," \u2014 we\u2019ve got devs ready to give your project whatever support and consultation you need."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://comms.push.org/docs/",children:"Push developer docs"})," to get started on building right away!"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"#PoweredbyPush"})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);